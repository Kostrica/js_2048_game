{"version":3,"sources":["scripts/main.js"],"names":["gameFieldBeforeMoving","gameFieldAfterMoving","controls","document","querySelector","gameFieldDOM","rows","arrayRows","startMessage","victoryMessage","defeatMessage","gameScore","fieldCell","fieldSize","delayTime","gameField","createGameField","score","stepPossible","cellsHaveChanged","victory","map","cells","innerHTML","getPosisionCell","Math","floor","random","addNumberToCell","repeatCount","chance","number","indexRow","indexColl","moveCellsUp","coll","row","numRow","moveCellsRight","numColl","moveCellsDown","moveCellsLeft","checkCellChange","count","checkTheNextStep","freeCellsAreAbsent","findIndex","cell","every","value","i","j","renderGameField","forEach","cellValue","className","classList","add","manageMessage","contains","remove","addEventListener","e","start","target","closest","restart","setTimeout","fill","code","preventDefault"],"mappings":"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","file":"main.30301336.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nconst controls = document.querySelector('.controls');\r\nconst gameFieldDOM = document.querySelector('.game-field');\r\nconst rows = gameFieldDOM.rows;\r\nconst arrayRows = [...rows];\r\nconst startMessage = document.querySelector('.message-start');\r\nconst victoryMessage = document.querySelector('.message-win');\r\nconst defeatMessage = document.querySelector('.message-lose');\r\nconst gameScore = document.querySelector('.game-score');\r\nconst fieldCell = 'field-cell';\r\nconst fieldSize = 4;\r\nconst delayTime = 200;\r\nconst gameField = createGameField();\r\nlet gameFieldBeforeMoving;\r\nlet gameFieldAfterMoving;\r\nlet score = 0;\r\nlet stepPossible = true;\r\nlet cellsHaveChanged = false;\r\nlet victory = false;\r\n\r\ncontrols.addEventListener('click', e => {\r\n  const start = e.target.closest('.start');\r\n  const restart = e.target.closest('.restart');\r\n\r\n  if (start) {\r\n    start.classList.remove('start');\r\n    start.classList.add('restart');\r\n    start.innerHTML = 'Restart';\r\n\r\n    manageMessage();\r\n    addNumberToCell(2);\r\n    setTimeout(() => renderGameField(), delayTime);\r\n  }\r\n\r\n  if (restart) {\r\n    stepPossible = true;\r\n    cellsHaveChanged = false;\r\n    victory = false;\r\n    score = 0;\r\n    gameScore.innerHTML = score;\r\n    gameField.map(row => row.fill(''));\r\n\r\n    manageMessage();\r\n    renderGameField();\r\n    addNumberToCell(2);\r\n    setTimeout(() => renderGameField(), delayTime);\r\n  }\r\n});\r\n\r\ndocument.addEventListener('keydown', e => {\r\n  switch (e.code) {\r\n    case 'ArrowUp':\r\n      e.preventDefault();\r\n      gameFieldBeforeMoving = createGameField();\r\n      moveCellsUp();\r\n      renderGameField();\r\n      gameFieldAfterMoving = createGameField();\r\n      checkCellChange();\r\n      addNumberToCell();\r\n      checkTheNextStep();\r\n\r\n      setTimeout(() => {\r\n        renderGameField();\r\n        manageMessage();\r\n      }, delayTime);\r\n      break;\r\n    case 'ArrowRight':\r\n      e.preventDefault();\r\n      gameFieldBeforeMoving = createGameField();\r\n      moveCellsRight();\r\n      renderGameField();\r\n      gameFieldAfterMoving = createGameField();\r\n      checkCellChange();\r\n      addNumberToCell();\r\n      checkTheNextStep();\r\n\r\n      setTimeout(() => {\r\n        renderGameField();\r\n        manageMessage();\r\n      }, delayTime);\r\n      break;\r\n    case 'ArrowDown':\r\n      e.preventDefault();\r\n      gameFieldBeforeMoving = createGameField();\r\n      moveCellsDown();\r\n      renderGameField();\r\n      gameFieldAfterMoving = createGameField();\r\n      checkCellChange();\r\n      addNumberToCell();\r\n      checkTheNextStep();\r\n\r\n      setTimeout(() => {\r\n        renderGameField();\r\n        manageMessage();\r\n      }, delayTime);\r\n      break;\r\n    case 'ArrowLeft':\r\n      e.preventDefault();\r\n      gameFieldBeforeMoving = createGameField();\r\n      moveCellsLeft();\r\n      renderGameField();\r\n      gameFieldAfterMoving = createGameField();\r\n      checkCellChange();\r\n      addNumberToCell();\r\n      checkTheNextStep();\r\n\r\n      setTimeout(() => {\r\n        renderGameField();\r\n        manageMessage();\r\n      }, delayTime);\r\n      break;\r\n  }\r\n});\r\n\r\nfunction createGameField() {\r\n  return arrayRows\r\n    .map(({ cells }) => [...cells]\r\n      .map(({ innerHTML }) => innerHTML));\r\n}\r\n\r\nfunction getPosisionCell() {\r\n  return Math.floor(Math.random() * fieldSize);\r\n}\r\n\r\nfunction addNumberToCell(repeatCount = 1) {\r\n  if (repeatCount) {\r\n    if (!cellsHaveChanged && stepPossible && !victory) {\r\n      const chance = Math.random();\r\n      let number;\r\n\r\n      chance < 0.9 ? number = 2 : number = 4;\r\n\r\n      let indexRow;\r\n      let indexColl;\r\n\r\n      do {\r\n        indexRow = getPosisionCell();\r\n        indexColl = getPosisionCell();\r\n      } while (gameField[indexRow][indexColl] !== '');\r\n\r\n      gameField[indexRow][indexColl] = number;\r\n    }\r\n\r\n    return addNumberToCell(repeatCount - 1);\r\n  }\r\n}\r\n\r\nfunction moveCellsUp() {\r\n  if (stepPossible && !victory) {\r\n    for (let coll = 0; coll < fieldSize; coll++) {\r\n      for (let row = 1; row < fieldSize; row++) {\r\n        if (gameField[row][coll]) {\r\n          let numRow = row;\r\n\r\n          while (numRow > 0) {\r\n            if (!gameField[numRow - 1][coll]) {\r\n              gameField[numRow - 1][coll] = gameField[numRow][coll];\r\n              gameField[numRow][coll] = '';\r\n              numRow--;\r\n            } else if (gameField[numRow - 1][coll]\r\n                === gameField[numRow][coll]) {\r\n              gameField[numRow - 1][coll] *= 2;\r\n              score += gameField[numRow - 1][coll];\r\n              gameScore.innerHTML = score;\r\n              gameField[numRow][coll] = '';\r\n              break;\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction moveCellsRight() {\r\n  if (stepPossible && !victory) {\r\n    for (let row = 0; row < fieldSize; row++) {\r\n      for (let coll = fieldSize - 2; coll >= 0; coll--) {\r\n        if (gameField[row][coll]) {\r\n          let numColl = coll;\r\n\r\n          while (numColl + 1 < fieldSize) {\r\n            if (!gameField[row][numColl + 1]) {\r\n              gameField[row][numColl + 1] = gameField[row][numColl];\r\n              gameField[row][numColl] = '';\r\n              numColl++;\r\n            } else if (gameField[row][numColl]\r\n                === gameField[row][numColl + 1]) {\r\n              gameField[row][numColl + 1] *= 2;\r\n              score += gameField[row][numColl + 1];\r\n              gameScore.innerHTML = score;\r\n              gameField[row][numColl] = '';\r\n              break;\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction moveCellsDown() {\r\n  if (stepPossible && !victory) {\r\n    for (let coll = 0; coll < fieldSize; coll++) {\r\n      for (let row = fieldSize - 2; row >= 0; row--) {\r\n        if (gameField[row][coll]) {\r\n          let numRow = row;\r\n\r\n          while (numRow + 1 < fieldSize) {\r\n            if (!gameField[numRow + 1][coll]) {\r\n              gameField[numRow + 1][coll] = gameField[numRow][coll];\r\n              gameField[numRow][coll] = '';\r\n              numRow++;\r\n            } else if (gameField[numRow + 1][coll]\r\n                === gameField[numRow][coll]) {\r\n              gameField[numRow + 1][coll] *= 2;\r\n              score += gameField[numRow + 1][coll];\r\n              gameScore.innerHTML = score;\r\n              gameField[numRow][coll] = '';\r\n              break;\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction moveCellsLeft() {\r\n  if (stepPossible && !victory) {\r\n    for (let row = 0; row < fieldSize; row++) {\r\n      for (let coll = 1; coll < fieldSize; coll++) {\r\n        if (gameField[row][coll]) {\r\n          let numColl = coll;\r\n\r\n          while (numColl - 1 >= 0) {\r\n            if (!gameField[row][numColl - 1]) {\r\n              gameField[row][numColl - 1] = gameField[row][numColl];\r\n              gameField[row][numColl] = '';\r\n              numColl--;\r\n            } else if (gameField[row][numColl]\r\n                === gameField[row][numColl - 1]) {\r\n              gameField[row][numColl - 1] *= 2;\r\n              score += gameField[row][numColl - 1];\r\n              gameScore.innerHTML = score;\r\n              gameField[row][numColl] = '';\r\n              break;\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction checkCellChange() {\r\n  let count = 0;\r\n\r\n  for (let row = 0; row < fieldSize; row++) {\r\n    for (let coll = 0; coll < fieldSize; coll++) {\r\n      if (gameFieldBeforeMoving[row][coll]\r\n          !== gameFieldAfterMoving[row][coll]) {\r\n        count++;\r\n      }\r\n    }\r\n  }\r\n\r\n  cellsHaveChanged = !count;\r\n}\r\n\r\nfunction checkTheNextStep() {\r\n  const freeCellsAreAbsent = gameField\r\n    .map(row => row.findIndex(cell => cell === ''))\r\n    .every(value => value === -1);\r\n\r\n  if (freeCellsAreAbsent) {\r\n    let count = 0;\r\n\r\n    for (let i = 0; i < fieldSize; i++) {\r\n      for (let j = 1; j < fieldSize; j++) {\r\n        if (gameField[i][j] === gameField[i][j - 1]\r\n            || gameField[j][i] === gameField[j - 1][i]) {\r\n          count++;\r\n        }\r\n      }\r\n    }\r\n\r\n    stepPossible = count;\r\n  }\r\n}\r\n\r\nfunction renderGameField() {\r\n  gameField.forEach((row, indexRow) => {\r\n    row.forEach((cellValue, indexColl) => {\r\n      rows[indexRow].cells[indexColl].innerHTML = cellValue;\r\n      rows[indexRow].cells[indexColl].className = fieldCell;\r\n\r\n      if (cellValue) {\r\n        rows[indexRow]\r\n          .cells[indexColl]\r\n          .classList.add(`${fieldCell}--${cellValue}`);\r\n      }\r\n\r\n      if (cellValue === 2048) {\r\n        victory = true;\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction manageMessage() {\r\n  if (!startMessage.classList.contains('hidden')) {\r\n    startMessage.classList.add('hidden');\r\n  }\r\n\r\n  if (!victoryMessage.classList.contains('hidden')) {\r\n    victoryMessage.classList.add('hidden');\r\n  }\r\n\r\n  if (!defeatMessage.classList.contains('hidden')) {\r\n    defeatMessage.classList.add('hidden');\r\n  }\r\n\r\n  if (victory) {\r\n    victoryMessage.classList.remove('hidden');\r\n  }\r\n\r\n  if (!stepPossible) {\r\n    defeatMessage.classList.remove('hidden');\r\n  }\r\n}\r\n"]}